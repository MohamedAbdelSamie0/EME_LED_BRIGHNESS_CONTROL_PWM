
PWM_dimming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c46  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000780  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000454  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	a1 f5       	brne	.+104    	; 0xe8 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	89 f0       	breq	.+34     	; 0xa6 <DIO_setPinDirection+0x2a>
  84:	28 f0       	brcs	.+10     	; 0x90 <DIO_setPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	c9 f0       	breq	.+50     	; 0xbc <DIO_setPinDirection+0x40>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	11 f1       	breq	.+68     	; 0xd2 <DIO_setPinDirection+0x56>
  8e:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
  90:	2a b3       	in	r18, 0x1a	; 26
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <DIO_setPinDirection+0x20>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <DIO_setPinDirection+0x1c>
  a0:	82 2b       	or	r24, r18
  a2:	8a bb       	out	0x1a, r24	; 26
			break;
  a4:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
  a6:	27 b3       	in	r18, 0x17	; 23
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_setPinDirection+0x36>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_setPinDirection+0x32>
  b6:	82 2b       	or	r24, r18
  b8:	87 bb       	out	0x17, r24	; 23
			break;
  ba:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_setPinDirection+0x4c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_setPinDirection+0x48>
  cc:	82 2b       	or	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
			break;
  d0:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
  d2:	21 b3       	in	r18, 0x11	; 17
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_setPinDirection+0x62>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_setPinDirection+0x5e>
  e2:	82 2b       	or	r24, r18
  e4:	81 bb       	out	0x11, r24	; 17
			break;
  e6:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
  e8:	41 11       	cpse	r20, r1
  ea:	37 c0       	rjmp	.+110    	; 0x15a <DIO_setPinDirection+0xde>
	{
		switch(Port)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 f0       	breq	.+36     	; 0x114 <DIO_setPinDirection+0x98>
  f0:	28 f0       	brcs	.+10     	; 0xfc <DIO_setPinDirection+0x80>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	d9 f0       	breq	.+54     	; 0x12c <DIO_setPinDirection+0xb0>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	29 f1       	breq	.+74     	; 0x144 <DIO_setPinDirection+0xc8>
  fa:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_setPinDirection+0x8c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_setPinDirection+0x88>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	8a bb       	out	0x1a, r24	; 26
			break;
 112:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_setPinDirection+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_setPinDirection+0xa0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
			break;
 12a:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_setPinDirection+0xbc>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_setPinDirection+0xb8>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
			break;
 142:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_setPinDirection+0xd4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_setPinDirection+0xd0>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <main>:

int main(void)
{
	//TimerConfiguration.compare_value = COMPARE_VALUE;
	//TimerConfiguration->mode = Normal;
	TimerConfiguration.prescaler = Prescalar_64;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	
	set_pwmPins();
 162:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_pwmPins>
	SetBit(SREG, 7);		/* Enable global interrupts	*/
 166:	8f b7       	in	r24, 0x3f	; 63
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	8f bf       	out	0x3f, r24	; 63
	
	//LCD_init();
	//LCD_Clear();
   
	Timer_init(&TimerConfiguration);
 16c:	80 e6       	ldi	r24, 0x60	; 96
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Timer_init>
    while (1)
    {
		PWM_altering();
 174:	0e 94 bd 00 	call	0x17a	; 0x17a <PWM_altering>
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x18>

0000017a <PWM_altering>:
 *
 * input params: NONE
 * output params: NONE
 */ 
void PWM_altering()
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	uint16_t duty;
	
	for(duty = 3; duty <= 253; duty++)
 17e:	c3 e0       	ldi	r28, 0x03	; 3
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	0a c0       	rjmp	.+20     	; 0x198 <PWM_altering+0x1e>
	{
		PWM(duty);
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <PWM_altering+0x14>
 192:	00 c0       	rjmp	.+0      	; 0x194 <PWM_altering+0x1a>
 194:	00 00       	nop
 */ 
void PWM_altering()
{
	uint16_t duty;
	
	for(duty = 3; duty <= 253; duty++)
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	ce 3f       	cpi	r28, 0xFE	; 254
 19a:	d1 05       	cpc	r29, r1
 19c:	98 f3       	brcs	.-26     	; 0x184 <PWM_altering+0xa>
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9c e9       	ldi	r25, 0x9C	; 156
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <PWM_altering+0x28>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <PWM_altering+0x2e>
 1a8:	00 00       	nop
	{
		PWM(duty);
		_delay_ms(10);
	}
	_delay_ms(10);
	for(duty = 253; duty >= 3; duty--)
 1aa:	cd ef       	ldi	r28, 0xFD	; 253
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <PWM_altering+0x4a>
	{
		PWM(duty);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <PWM>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9c e9       	ldi	r25, 0x9C	; 156
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <PWM_altering+0x40>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <PWM_altering+0x46>
 1c0:	00 00       	nop
	{
		PWM(duty);
		_delay_ms(10);
	}
	_delay_ms(10);
	for(duty = 253; duty >= 3; duty--)
 1c2:	21 97       	sbiw	r28, 0x01	; 1
 1c4:	c3 30       	cpi	r28, 0x03	; 3
 1c6:	d1 05       	cpc	r29, r1
 1c8:	98 f7       	brcc	.-26     	; 0x1b0 <PWM_altering+0x36>
	{
		PWM(duty);
		_delay_ms(10);
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <set_pwmPins>:

void set_pwmPins()
{
	DIO_setPinDirection(DIO_PORTB, DIO_PIN3, PIN_OUTPUT);	/*	set OC0 pin as output	*/
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	DIO_setPinDirection(RED_PORT_ID, DIO_PIN7, PIN_INPUT);	/*	set RED pin as input	*/
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	67 e0       	ldi	r22, 0x07	; 7
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
 1e4:	08 95       	ret

000001e6 <Timer_init>:
 * input params: NONE
 * output params: NONE
 */ 
void Timer_stop()
{
	TIMER0_CTRL_REG = 0x00;	/* No clock source; timer stopped	*/
 1e6:	fc 01       	movw	r30, r24
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	88 66       	ori	r24, 0x68	; 104
 1ec:	83 bf       	out	0x33, r24	; 51
 1ee:	08 95       	ret

000001f0 <PWM>:
 * input params: uint8_t comp_val
 * output params: NONE
 */ 
void PWM(uint8_t comp_val)
{
	TIMER0_OCR0_REG = comp_val;
 1f0:	8c bf       	out	0x3c, r24	; 60
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
